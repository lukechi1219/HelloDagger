apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.lukechi.android.hellodagger"
        // only support stream() since 24
        minSdkVersion 24
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        // testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.lukechi.android.hellodagger.MyTestInstrumentationRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    // ???
//    configurations.all {
//        resolutionStrategy.force 'com.android.support:support-annotations:26.1.0'
//    }
}

dependencies {
    def DAGGER_VERSION = '2.17'
    def MOCKITO_VERSION = '2.23.4'
    def TEST_SUPPORT_VERSION = '1.1.0-alpha4'
    def ESPRESSO_VERSION = '3.1.0-alpha4'
    def room_version = '2.1.0-alpha04'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    /*
     * https://developer.android.com/jetpack/androidx/migrate
     */
//    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
//    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha02'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // https://proandroiddev.com/android-jetpack-foundation-multidex-part-1-chapter-3-64a3e43c92dc
    // AndroidX is the open-source project that the Android team uses to develop, test, package, version and release libraries within Jetpack.
    // AndroidX is a major improvement to the original Android Support Library.
    implementation 'androidx.multidex:multidex:2.0.1'
    // implementation 'com.android.support:multidex:1.0.3' // old way

    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'joda-time:joda-time:2.9.9'

    // dagger
    implementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    implementation "com.google.dagger:dagger-android:${DAGGER_VERSION}"
    implementation "com.google.dagger:dagger-android-support:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"

    /*
     * room
     */
    implementation "androidx.room:room-runtime:$room_version"
    // annotationProcessor
    kapt "androidx.room:room-compiler:$room_version" // use kapt for Kotlin
    implementation "androidx.room:room-rxjava2:$room_version" // optional
//    // optional - Guava support, including Optional and ListenableFuture
//    implementation "androidx.room:room-guava:$room_version"
    implementation "androidx.room:room-coroutines:$room_version" // optional - Coroutines support
    testImplementation "androidx.room:room-testing:$room_version" // Test helpers

    // GSON body parser
//    implementation 'com.google.code.gson:gson:2.8.2'
    // https://medium.com/@joshuaavalon/migrate-from-gson-to-moshi-in-android-bfc9f357ff17
    implementation 'com.squareup.moshi:moshi:1.6.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.6.0'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.6.0'

    // latest is 0.8.15, but annotation only up to 0.8.13 ??
    implementation 'com.tickaroo.tikxml:annotation:0.8.13'
    implementation 'com.tickaroo.tikxml:core:0.8.13'
    implementation 'com.tickaroo.tikxml:retrofit-converter:0.8.13'
    kapt 'com.tickaroo.tikxml:processor:0.8.13'

    compileOnly 'com.tickaroo.tikxml:auto-value-tikxml:0.8.13'
    kapt 'com.tickaroo.tikxml:auto-value-tikxml:0.8.13'

    compileOnly 'com.google.auto.value:auto-value:1.5.2'
    // here annotationProcessor cant be replaced by kapt
    annotationProcessor 'com.google.auto.value:auto-value:1.5.2'

//    compileOnly 'com.ryanharter.auto.value:auto-value-gson:0.4.5'
//    // here annotationProcessor cant be replaced by kapt
//    annotationProcessor 'com.ryanharter.auto.value:auto-value-gson:0.4.5'

    compileOnly 'com.ryanharter.auto.value:auto-value-moshi:0.4.5'
    // here annotationProcessor cant be replaced by kapt
    annotationProcessor 'com.ryanharter.auto.value:auto-value-moshi:0.4.5'

    // https://anson-site.blogspot.com/2015/08/androidserializable-vs-parcelable.html
    compileOnly 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'
    kapt 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'

    // Retrofit http://square.github.io/retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
//    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.4.0'
    // extra adapter
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // https://github.com/ReactiveX/RxAndroid
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    // RxAndroid adds android specific bindings for RxJava,
    // Specifically AndroidSchedulers.mainThread() which provides a Scheduler
    // that schedules on main thread and can be used to switch between threads in Android.
    // https://stackoverflow.com/questions/43356314/android-rxjava-2-junit-test-getmainlooper-in-android-os-looper-not-mocked-runt
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // test
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.truth:truth:0.34'
    //
    testImplementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    testImplementation "com.google.dagger:dagger-android:${DAGGER_VERSION}"
    testImplementation "com.google.dagger:dagger-android-support:${DAGGER_VERSION}"
    // Android Test
    kaptAndroidTest "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
    // JUnit test
    kaptTest "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
    kaptTest "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
//    //
//    testImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.4'
//    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.4'
    //
    testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
    androidTestImplementation "org.mockito:mockito-android:${MOCKITO_VERSION}"
    //
    androidTestImplementation "androidx.test:runner:${TEST_SUPPORT_VERSION}"
    androidTestImplementation "androidx.test:rules:${TEST_SUPPORT_VERSION}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${ESPRESSO_VERSION}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${ESPRESSO_VERSION}"
}
