apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.lukechi.android.hellodagger"
        // only support stream() since 24
        minSdkVersion 23
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        // testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.lukechi.android.hellodagger.MyTestInstrumentationRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        // To remove all shared state from your device's CPU and memory after each test, use the clearPackageData flag.
        testInstrumentationRunnerArguments clearPackageData: 'true'

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
//            }
//        }
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
//            correctErrorTypes = true // ? for AutoValue ? AutoService ?
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    // https://developer.android.com/training/testing/unit-testing/local-unit-tests
    testOptions {
        // for ORCHESTRATOR & Robolectric
        unitTests.includeAndroidResources = true
        // Android Test Orchestrator, which allows you to run each of your app's tests
        // within its own invocation of Instrumentation.
        // 1. Minimal shared state.
        // 2. Crashes are isolated.
        // Run Android Test Orchestrator by executing the following command:
        // ./gradlew connectedCheck
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    // ???
//    configurations.all {
//        resolutionStrategy.force 'com.android.support:support-annotations:26.1.0'
//    }
}

dependencies {
    def DAGGER_VERSION = '2.17'
    def ESPRESSO_VERSION = '3.1.1'
    def room_version = '2.1.0-alpha04'
    def lifecycle_version = '2.0.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    /*
     * https://developer.android.com/jetpack/androidx/migrate
     */
    implementation 'androidx.core:core:1.0.1'
//    implementation 'com.android.support:appcompat-v7:28.0.0'
    // AndroidX:Appcompat I:art error android.view.View$OnUnhandledKeyEventListener
    // Didn't find class
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
//    implementation 'com.android.support:design:28.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha03'
    implementation 'androidx.recyclerview:recyclerview:1.1.0-alpha02'
//    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // https://proandroiddev.com/android-jetpack-foundation-multidex-part-1-chapter-3-64a3e43c92dc
    // AndroidX is the open-source project that the Android team uses to develop, test, package, version and release libraries within Jetpack.
    // AndroidX is a major improvement to the original Android Support Library.
    implementation 'androidx.multidex:multidex:2.0.1'
    // implementation 'com.android.support:multidex:1.0.3' // old way

    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'joda-time:joda-time:2.9.9'

    // dagger
    // https://github.com/google/dagger/issues/1245
    // Downgraded dagger to 2.16 ?
    implementation 'com.google.dagger:dagger:2.17'
    implementation "com.google.dagger:dagger-android:${DAGGER_VERSION}"
    implementation "com.google.dagger:dagger-android-support:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
    kapt "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"

    /*
     * room
     */
    implementation 'androidx.room:room-runtime:2.1.0-alpha04'
    // annotationProcessor
    kapt "androidx.room:room-compiler:$room_version" // use kapt for Kotlin
    // RxJava2 https://medium.com/mindorks/room-with-rxjava-and-dagger-2722f4420651
    implementation "androidx.room:room-rxjava2:$room_version" // optional
//    // optional - Guava support, including Optional and ListenableFuture
//    implementation "androidx.room:room-guava:$room_version"
    implementation "androidx.room:room-coroutines:$room_version" // optional - Coroutines support
    testImplementation "androidx.room:room-testing:$room_version" // Test helpers

    /*
     * Dependencies for Lifecycle, including LiveData and ViewModel.
     */
    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
//    // alternatively - just ViewModel
//    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version" // use -ktx for Kotlin
//    // alternatively - just LiveData
//    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
//    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI AndroidX libraries use this lightweight import for Lifecycle
//    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    // ??
//    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version" // use kapt for Kotlin
    // alternately - if using Java8, use the following instead of lifecycle-compiler ??
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // use -ktx for Kotlin
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version" // Test helpers for LiveData

    // Didn't find class "com.google.common.collect.ImmutableMap" guava
    // in DaggerAppComponent
    // classpath 'com.android.tools.build.jetifier:jetifier-processor:1.0.0-beta01'
    // ?? api ?? implementation
//    api 'com.google.guava:guava:23.5-jre'
    api 'org.checkerframework:checker-compat-qual:2.5.3'
    api 'com.google.errorprone:error_prone_annotations:2.3.1'
    // https://issuetracker.google.com/issues/116154359 ??
//    api 'com.google.guava:guava:26.0-android'
    api 'com.google.guava:guava:27.0.1-android'

    // GSON body parser
//    implementation 'com.google.code.gson:gson:2.8.2'
    // https://medium.com/@joshuaavalon/migrate-from-gson-to-moshi-in-android-bfc9f357ff17
    implementation 'com.squareup.moshi:moshi:1.6.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.6.0'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.6.0'

    // latest is 0.8.15, but annotation only up to 0.8.13 ??
    implementation 'com.tickaroo.tikxml:annotation:0.8.13'
    implementation 'com.tickaroo.tikxml:core:0.8.13'
    implementation 'com.tickaroo.tikxml:retrofit-converter:0.8.13'
    kapt 'com.tickaroo.tikxml:processor:0.8.13'

    compileOnly 'com.tickaroo.tikxml:auto-value-tikxml:0.8.13'
    kapt 'com.tickaroo.tikxml:auto-value-tikxml:0.8.13'

    compileOnly 'com.google.auto.value:auto-value:1.5.2'
    // here annotationProcessor cant be replaced by kapt
    annotationProcessor 'com.google.auto.value:auto-value:1.5.2'

//    compileOnly 'com.ryanharter.auto.value:auto-value-gson:0.4.5'
//    // here annotationProcessor can not be replaced by kapt
//    annotationProcessor 'com.ryanharter.auto.value:auto-value-gson:0.4.5'

    compileOnly 'com.ryanharter.auto.value:auto-value-moshi:0.4.5'
    // here annotationProcessor can not be replaced by kapt
    annotationProcessor 'com.ryanharter.auto.value:auto-value-moshi:0.4.5'

    // https://anson-site.blogspot.com/2015/08/androidserializable-vs-parcelable.html
    compileOnly 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'
    kapt 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'

    // Retrofit http://square.github.io/retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
//    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.4.0'
    // extra adapter
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // https://github.com/ReactiveX/RxAndroid
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    // RxAndroid adds android specific bindings for RxJava,
    // Specifically AndroidSchedulers.mainThread() which provides a Scheduler
    // that schedules on main thread and can be used to switch between threads in Android.
    // https://stackoverflow.com/questions/43356314/android-rxjava-2-junit-test-getmainlooper-in-android-os-looper-not-mocked-runt
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // test
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.truth:truth:0.42'
    //
    testImplementation "com.google.dagger:dagger:${DAGGER_VERSION}"
    testImplementation "com.google.dagger:dagger-android:${DAGGER_VERSION}"
    testImplementation "com.google.dagger:dagger-android-support:${DAGGER_VERSION}"
    // Android Test
    kaptAndroidTest "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
    // JUnit test
    kaptTest "com.google.dagger:dagger-compiler:${DAGGER_VERSION}"
    kaptTest "com.google.dagger:dagger-android-processor:${DAGGER_VERSION}"
//    //
//    testImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.4'
//    androidTestImplementation 'com.github.fabioCollini.daggermock:daggermock:0.8.4'
    //
    testImplementation 'org.mockito:mockito-core:2.23.4'
    androidTestImplementation 'org.mockito:mockito-android:2.23.4'
    //
    // https://developer.android.com/training/testing/set-up-project#gradle-dependencies
    // Core library
    testImplementation 'androidx.test:core:1.1.0' // for Robolectric
    androidTestImplementation 'androidx.test:core:1.1.0'
    // AndroidJUnitRunner and JUnit Rules
//    androidTestImplementation 'androidx.test:runner:1.1.1' // ? deprecated?
    androidTestImplementation 'androidx.test:rules:1.1.1' // for MainActivityTest androidTest
    // https://developer.android.com/training/testing/junit-runner#using-android-test-orchestrator
    androidTestUtil 'androidx.test:orchestrator:1.1.1'
    // ext
    testImplementation 'androidx.test.ext:junit:1.1.0' // for Robolectric
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    // Assertions
    androidTestImplementation 'androidx.test.ext:truth:1.1.0'
    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test.espresso:espresso-web:$ESPRESSO_VERSION"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$ESPRESSO_VERSION"
    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$ESPRESSO_VERSION"

    /*
    http://robolectric.org/getting-started/
     */
    // for CREATE VIRTUAL TABLE https://github.com/robolectric/robolectric/issues/3556
    implementation 'com.almworks.sqlite4java:sqlite4java:1.0.392'
    testImplementation 'com.almworks.sqlite4java:sqlite4java:1.0.392'
    testImplementation 'org.robolectric:robolectric:4.1'
}
